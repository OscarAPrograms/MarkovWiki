///////////////////////////////////////////////////////////////////////////////
//
// Title:    GUI Application
//
// Author:   Oscar Afraymovich
//
//////////////////////// ASSISTANCE/HELP CITATIONS ////////////////////////////
//
//								   							  N/A
//
///////////////////////////////////////////////////////////////////////////////
package com.github.OscarAPrograms.MarkovWiki;

import io.github.fastily.jwiki.core.Wiki;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.Text;

/** 
 * Class representing a JavaFX graphical user interface made to resemble Wikipedia's website. 
 * This GUI allows the user to search for an existing, valid Wikipedia article which is used
 * to create a Markov chain model and stochastically generate text.
 */
public class App extends Application {
	@Override
	/** 
	 * Initialize the GUI's primary stage by setting its scene after adding all necessary
	 * objects. 	 
	 * 
	 * @param primaryStage - the primary stage used by the GUI.
	 */
	public void start(Stage primaryStage) {
		try {
			// Set "image" to MarkovWiki.png (the GUI's "start page").
			Image image = new Image(new FileInputStream("MarkovWiki.png"));
			ImageView imageView = new ImageView(image);

			// Set the height and width of the "start page" image.
			imageView.setFitWidth(768);
			imageView.setFitHeight(719); //719

			// Create a TextField object (to function as a search bar).
			TextField searchBar = new TextField();

			// Set the X position, Y position, width, height, and font of "searchBar".
			searchBar.setLayoutX(16);
			searchBar.setLayoutY(645);
			searchBar.setPrefWidth(730);
			searchBar.setPrefHeight(65);
			searchBar.setFont(Font.font(20));

			// Create a Group object with the "start page" and "searchBar".
			Group root = new Group(imageView, searchBar);

			// Create a scene object (with the Group object as its root node).
			Scene scene = new Scene(root, 768, 750); 

			// Set "primaryStage"'s title to "MarkovWiki".
			primaryStage.setTitle("MarkovWiki");

			// Set "primaryStage"'s scene.
			primaryStage.setScene(scene);

			// Display "primaryStage".
			primaryStage.show();

			// Create a Markov Chain model (for random text generation).
			MarkovModel markovChain = new MarkovModel(2); // Words generated depend on 2 past words.
			// Create a Wiki object (from the jwiki library).
			Wiki wiki = new Wiki.Builder().build();

			// Lambda expression: when a key is pressed inside searchBar, event is set to
			// that key:
			searchBar.setOnKeyPressed(event -> {
				if (event.getCode() == KeyCode.ENTER) {
					// If the user searched for an existing Wikipedia article 
					String userSearch = searchBar.getText(); // Store the user's search.
					if (wiki.exists(userSearch)) {
						try {
							// Parse the text of the Wikipedia article and stochastically generate text.
							markovChain.parseText(wiki.getPageText(userSearch)); 
							// Create a Text object (with 5 random sentences generated by the Markov Model).
							Text generatedText = new Text(52, 270, markovChain.generateText(5));

							// Set the font and maximum width of "generatedText"
							generatedText.setFont(Font.font(20));
							generatedText.setWrappingWidth(700);
							
							// Set "articleImage" to MarkovWikiArticle.png (the GUI's "article page").
							Image articleImage = new Image(new FileInputStream("MarkovWikiArticle.png"));
							ImageView articleImageView = new ImageView(articleImage);

							// Set the height and width of the "article page" image.
							articleImageView.setFitWidth(768);
							articleImageView.setFitHeight(719);

							// Create a Text object (to display the title the user searched for)
							Text titleText = new Text(280, 150, "");
							// If the user's search has over 36 characters:
							if (userSearch.length() > 36) {
								// Set "titleText"'s text to "userSearch"'s first 33 characters plus a "...".
								titleText.setText(userSearch.substring(0, 32)+"...");
							} else {
								// Otherwise set "titleText"'s text to "userSearch".
								titleText.setText(userSearch);
							}							
							
							// Set the font of "titleText"
							titleText.setFont(Font.font(25));

							// Switch to the "article page":
							root.getChildren().clear(); // Remove all of "root"'s children.
							// Add "articleImageView", "titleText", "generatedText" to "root"'s children.
							root.getChildren().addAll(articleImageView, titleText, generatedText);

							// Set "primaryStage"'s title to "MarkovWiki:" + the user's search.
							primaryStage.setTitle("MarkovWiki: " + userSearch);

							/*
							/* The article does not contain any sentences and thus is probably not a standard
							 * Wikipedia page (it is likely a list of items like a "disambiguation page"), so
							 * generating sentences is impossible and an IllegalArgumentException was thrown.
							 */
						} catch (IllegalArgumentException e) {
							// If the user's search is not the name of a valid (standard) Wikipedia article:
							
							// Create a Text object (explaining the search was invalid)
							Text invalidSearch = new Text(16, 730, "This Wikipedia page is invalid for text "
									+ "generation. Avoid disambiguation/redirect pages.");

							// Set the font of the "invalidSearch" warning
							invalidSearch.setFont(Font.font(19));

							// If "root" has 3 children, a warning is already on display.
							if (root.getChildren().size() == 3) {
								// Remove the warning.
								root.getChildren().remove(2);
							}
							// Display the "invalidSearch" warning.
							root.getChildren().add(invalidSearch);
							
							/* MarkovWikiArticle.png is in the wrong location, FileNotFoundException was
							 * thrown.
							 */
						} catch (FileNotFoundException e) {
							System.out.print("FileNotFoundException: MarkovWikiArticle.png was not found.");
						}
					} else {
						// If the user's search is not the name of an existing Wikipedia article:
						
						// Create a Text object (explaining the search was not found)
						Text notFound = new Text(16, 730, "Search for an existing Wikipedia article"
								+ " (enter its title verabitm).");

						// Set the font of the "notFound" warning
						notFound.setFont(Font.font(19));

						// If "root" has 3 children, a warning is already on display.
						if (root.getChildren().size() == 3) {
							// Remove the warning.
							root.getChildren().remove(2);
						}
						// Display the "notFound" warning.
						root.getChildren().add(notFound);
					}
				}
			});	
			// MarkovWiki.png is in the wrong location, FileNotFoundException was thrown.
		} catch (FileNotFoundException e) {
			System.out.print("FileNotFoundException: MarkovWiki.png was not found");
		} 
	}

	/** 
	 * Launches the MarkovWiki GUI application. 
	 * 
	 * @param args - the command line arguments passed to the application.
	 */
	public static void main(String[] args) {
		launch(args);
	}
}
